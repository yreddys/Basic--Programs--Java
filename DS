// Implement queue using Arrays

public class Queue {
    private int maxSize;
    private int[] queueArray;
    private int front;  // Points to the first element
    private int top;    // Points to the last element inserted

    // Constructor to initialize the queue
    public Queue(int size) {
        this.maxSize = size;
        this.queueArray = new int[maxSize];
        this.front = 0;   // Queue starts from 0
        this.top = -1;    // Initially, queue is empty
    }

    // Enqueue: Adds element at the end of the queue
    public void enqueue(int value) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue " + value);
            return;
        }
        top++;
        queueArray[top] = value;
        System.out.println(value + " enqueued into queue");
    }

    // Dequeue: Removes and returns the front element
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue");
            return -1;
        }
        int removed = queueArray[front];
        front++;
        return removed;
    }

    // Peek: View the front element without removing it
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Nothing to peek");
            return -1;
        }
        return queueArray[front];
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return front > top;
    }

    // Check if the queue is full
    public boolean isFull() {
        return top == maxSize - 1;
    }

    // Display the elements in the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return;
        }
        System.out.print("Queue elements: ");
        for (int i = front; i <= top; i++) {
            System.out.print(queueArray[i] + " ");
        }
        System.out.println();
    }

    // Main method to test the Queue
    public static void main(String[] args) {
        Queue myQueue = new Queue(5);

        myQueue.enqueue(10);
        myQueue.enqueue(20);
        myQueue.enqueue(30);
        myQueue.display();

        System.out.println("Front element is: " + myQueue.peek());

        System.out.println("Dequeued element: " + myQueue.dequeue());
        myQueue.display();

        myQueue.enqueue(40);
        myQueue.enqueue(50);
        myQueue.enqueue(60); // Should be full after this
        myQueue.enqueue(70); // Should print "Queue is full"
        myQueue.display();
    }
}




// Implement Stack using Arrays

public class Stack {
    private int maxSize;
    private int[] stackArray;
    private int top;

    // Constructor to initialize the stack
    public Stack(int size) {
        this.maxSize = size;
        this.stackArray = new int[maxSize];
        this.top = -1;  // Indicates stack is initially empty
    }

    // Push operation: adds element to the top
    public void push(int value) {
        if (isFull()) {
            System.out.println("Stack is full. Cannot push " + value);
            return;
        }
        top = top + 1;                 // Increment top
        stackArray[top] = value;       // Assign value to the new top position
        System.out.println(value + " pushed into stack");
    }

    // Pop operation: removes and returns top element
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop");
            return -1;
        }
        int poppedValue = stackArray[top];  // Store the value to return
        top = top - 1;                      // Decrement top
        return poppedValue;
    }

    // Peek operation: returns top element without removing
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Nothing to peek");
            return -1;
        }
        return stackArray[top];
    }

    // Check if stack is empty
    public boolean isEmpty() {
        if (top == -1) {
            return true;
        } else {
            return false;
        }
    }

    // Check if stack is full
    public boolean isFull() {
        if (top == maxSize - 1) {
            return true;
        } else {
            return false;
        }
    }

    // Display stack elements
    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty.");
            return;
        }

        System.out.print("Stack elements: ");
        for (int i = 0; i <= top; i = i + 1) {
            System.out.print(stackArray[i] + " ");
        }
        System.out.println();
    }

    // Main method to test the stack
    public static void main(String[] args) {
        Stack myStack = new Stack(5);

        myStack.push(10);
        myStack.push(20);
        myStack.push(30);
        myStack.display();

        int topElement = myStack.peek();
        System.out.println("Top element is: " + topElement);

        int poppedElement = myStack.pop();
        System.out.println("Popped element: " + poppedElement);

        myStack.display();
    }
}


















// 1. Program to find the MissingNumber

public class MissingNumberBruite {

	// {1,2,5,4} --> size 4, index 3,N+1

	public static int missingNumber(int arr[], int N) {
		for (int i = 1; i <= N; i++) {
			int flag = 0;
			for (int j = 0; j < N - 1; j++) {
				if (arr[j] == i) {
					flag = 1;
					break;
				}
			}
			if (flag == 0)
				return i;
		}
		return -1;
	}

	public static void main(String[] args) {
		int arr[] = { 1, 4, 5, 2 };
		int N = 5;
		int ans = missingNumber(arr, N);
		System.out.println(ans);
	}
}


// Program to find the MissingNumber (Optimal Solution )

package practice;

public class MissingNumberOptimal {
	
	public static int missingNumber(int arr[],int N) {
		
		int sum1 = N*(N+1)/2;
		int sum2 = 0;
		for(int i=0;i<arr.length;i++) {
			sum2 = sum2+arr[i];
		}
		int missingNumber = sum1-sum2;
		
		return missingNumber;
	}
	public static void main(String[] args) {
		int arr[] = {1,4,5,2};
		int N = 5;
		int ans = missingNumber(arr,N);
		System.out.println(ans);
	}

}


//  Program to find the MissingNumber(Using XOR)

// package practice;

//1^1 = 0
//0^1 = 1
//0^0 =0

//{1,2,3,4,5} -->
//{1,4,5,2} -->
// 3



public class MissingNumbersOptimal {
	
	public static int missingNumber(int arr[],int N) {
		int xor1 = 0;
		int xor2 = 0;
		for(int i=0;i<N-1;i++) {
			xor2 = xor2^arr[i];
			xor1 = xor1^(i+1);
		}
		xor1 = xor1^N;
		
		return xor1^xor2;
	}
	public static void main(String[] args) {
		int arr[] = {1,4,5,2};
		int N = 5;
		int ans = missingNumber(arr,N);
		System.out.println(ans);
	}

}
