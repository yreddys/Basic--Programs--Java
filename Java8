package com.employee.dept;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

public class practice {
	public static void main(String[] args) {

		List<Employee> list = new ArrayList<>();
		list.add(new Employee(1, "reddy", 100, 28));
		list.add(new Employee(2, "red", 10, 30));
		list.add(new Employee(3, "re", 10, 25));
		list.add(new Employee(4, "Sekhar", 150, 26));
		list.add(new Employee(5, "Hello", 200, 25));
		list.add(new Employee(6, "Hi", 100, 25));

// Age greater than 25

		List<Employee> whoseAgeGreater = list.stream().filter(e -> e.getAge() > 25).collect(Collectors.toList());

// finding count of whose age is greater than 25
		Long list2 = list.stream().filter(e -> e.getAge() > 25).collect(Collectors.counting());
		System.out.println(list2);
// Finding the second highest salary
		Optional<Employee> second = list.stream().sorted(Comparator.comparingInt(Employee::getSalary).reversed())
				.skip(0).findFirst();
// Finding the second highest salary
		Optional<Employee> secondHighest = list.stream()
				.sorted((e1, e2) -> Integer.compare(e2.getSalary(), e1.getSalary())).skip(1).findFirst();
// Whose name start with S
		List<Employee> namesStartwith = list.stream().filter(s -> s.getName().startsWith("s"))
				.collect(Collectors.toList());
		System.out.println(secondHighest);

// To group employees by age		

		Map<Integer, List<Employee>> employeesByAge = list.stream().collect(Collectors.groupingBy(Employee::getAge));

		employeesByAge.forEach((age, employees) -> {
			System.out.println("Age: " + age);
			employees.forEach(System.out::println);
			System.out.println("--------------------");
		});

// finding the avg age 
		
		Map<String, Double> avgAgeByName = list.stream()
                .collect(Collectors.groupingBy(Employee::getName, Collectors.averagingInt(Employee::getAge)));
		System.out.println(avgAgeByName);

// Group the Words by length 

List<String> list = Arrays.asList("I am Reddysekhar working At Wipro");
		Map<Integer, List<String>> countWordsLengthAndGrouping = Arrays.stream(list.get(0).split(" "))
                .collect(Collectors.groupingBy(String::length));

		countWordsLengthAndGrouping.forEach((emp, words) -> {
			System.out.println("Count:" + emp);
			System.out.println("Words:" + words);
			System.out.println("---------------");
		});
	

}

// group the department and find the count


		Map<String, Long> departmentCount = list.stream()
				.collect(Collectors.groupingBy(Employee::getDepartment, Collectors.counting()));

		departmentCount.forEach((department, count) -> System.out.println(department + ": " + count));


}}


// Java 8 program to find the even numbers 

List<Integer> numbers=Arrays.asList(10,20,25,27,30);
numbers.stream().filter(n->n%2==0).forEach(System.out::println);

// java 8 program to find the duplicate numbers from the list

List<Integer> numbers=Arrays.asList(10,20,20,25,25,27,30);
Set<Integer> hs=new HashSet<>();
numbers.stream().filter(n->!hs.add(n)).forEach(System.out::println);

// java 8 program to sort the list in the descending order 

List<Integer> numbers=Arrays.asList(10,20,25,27,30);
numbers.stream().sorted(Colections.reverseOrder()).forEach(System.out::println);


//   Department wise Highest salary

		Map<String, Optional<Employee>> highestSalariesByDept = list.stream().collect(Collectors
				.groupingBy(Employee::getDepartment, Collectors.maxBy(Comparator.comparingInt(Employee::getSalary))));

		// Print the employees with the highest salary in each department
		highestSalariesByDept.forEach((department, employee) -> System.out
				.println("Department: " + department + ", Employee with highest salary: " + employee.orElse(null)));
	
// Department wise secondHighest


Map<String, Optional<Employee>> secondHighestByDepartWise = employee.stream()
				.collect(Collectors.groupingBy(Employee::getAddress,
						Collectors.collectingAndThen(Collectors.toList(), list -> list.stream()
								.sorted(Comparator.comparingInt(Employee::getSalary).reversed()).skip(1).findFirst())));

		secondHighestByAddress.forEach((address, emp) -> System.out.println(address + ": " + emp.orElse(null)));
