// 1. String Palindrome using java 8

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Java8 {
    public static void main(String[] args) {
        List<String> words = Arrays.asList("radar", "hello", "deified");
        
        Map<Boolean, List<String>> palindromeMap = words.stream()
                .collect(Collectors.partitioningBy(
                        s -> s.equals(new StringBuilder(s).reverse().toString())));
        
        List<String> palindromes = palindromeMap.get(true);
        List<String> nonPalindromes = palindromeMap.get(false);
        
        System.out.println("Palindromes: " + palindromes);
        System.out.println("Non-Palindromes: " + nonPalindromes);
    }
}

 // 2. String Palindrome using java 8 with out predefined methods

import java.util.stream.IntStream;

public class Main {
    public static void main(String[] args) {
        String str = "abc";
        boolean isPalindrome = IntStream.range(0, str.length() / 2)
                .allMatch(i -> str.charAt(i) == str.charAt(str.length() - i - 1));
        System.out.println("Is palindrome: " + isPalindrome);
    }
}



// palindrome of number using java 8



import java.util.stream.IntStream;

public class Main {
    public static void main(String[] args) {
        int numberPalindrome = 123;
        String str = String.valueOf(numberPalindrome);
        boolean isPalindrome = IntStream.range(0, str.length() / 2)
                .allMatch(i -> str.charAt(i) == str.charAt(str.length() - i - 1));
        System.out.println("Is palindrome: " + isPalindrome);
    }
}


// 3. To convert odd numbers to even using Java 8

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6);

        List<Integer> updatedList = list.stream()
                                        .map(n -> (n % 2 != 0) ? n + 1 : n)  // Increment odd numbers by 1
                                        .collect(Collectors.toList());

        System.out.println(updatedList);  // Output: [2, 2, 4, 4, 6, 6]
    }
}

// .Find out the first non-repeated character from a string using stream?

package com.java8;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class FirstNonRepeatedCharacter {
    public static void main(String[] args) {
        String input = "aabbcde";
        
        Character firstNonRepeatedChar = input.chars()
            .mapToObj(c -> (char) c)
            .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting()))
            .entrySet()
            .stream()
            .filter(entry -> entry.getValue() == 1)
            .map(Map.Entry::getKey)
            .findFirst()
            .orElse(null);

        System.out.println("First non-repeated character: " + firstNonRepeatedChar);
    }
}

// java8 program to find the frequency of character

package com.java8;

import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class frequencyOfChar {
	public static void main(String[] args) {

		String inputString = "reedysekahrreddysekahr";

		Map<Character, Long> frequencyMap = inputString.chars().mapToObj(c -> (char) c)
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

		System.out.println("Frequency of each character:");
		frequencyMap.forEach((character, frequency) -> System.out.println(character + ": " + frequency));
	}
}


// java8 program to find the frequency of words

O/P:
red=2
green=1
blue=3

import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.Arrays;

public class WordOccurrences {
    public static void main(String[] args) {
        String s = "red green blue red blue blue";
        Map<String, Long> occurrences = Arrays.stream(s.split(" "))
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
        occurrences.forEach((word, count) -> System.out.println(word + "=" + count));
    }
}



to find pairs of integers in an array that sum up to a given target sum.?

I/P: {0, 4, 5, 6, 1, 2, 3};
O/P:
0,5
1,4
2,3

package com.variables;

import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;

public class pairs {
	public static void main(String[] args) {
		 int[] numbers = {0, 4, 5, 6, 1, 2, 3}; 
	        int targetSum = 5; 

	        findPairsWithSum(numbers, targetSum);
	    }

	    public static void findPairsWithSum(int[] numbers, int targetSum) {
	        Set<Integer> set = Arrays.stream(numbers).boxed().collect(Collectors.toSet());

	        Arrays.stream(numbers)
	                .filter(num -> set.contains(targetSum - num) && num <= targetSum - num)
	                .forEach(num -> System.out.println(num + "," + (targetSum -num)));
	}
}

// find the duplicates using stream ?



