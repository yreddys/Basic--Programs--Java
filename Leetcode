1004. Max Consecutive Ones III
 brute 
public class MaxConsecutiveOnesIII {

    public static int longestOnes(int[] nums, int k) {
        int maxLen = 0;

        for (int i = 0; i < nums.length; i++) {
            int zeroCount = 0;

            for (int j = i; j < nums.length; j++) {
                if (nums[j] == 0) {
                    zeroCount++;
                }

                if (zeroCount > k) {
                    break;
                }

                maxLen = Math.max(maxLen, j - i + 1);
            }
        }

        return maxLen;
    }

    public static void main(String[] args) {
        int[] nums = {1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0};
        int k = 2;
        System.out.println("Max Consecutive Ones (Brute Force with i and j): " + longestOnes(nums, k));
    }
}


1358.  Number of Substrings Containing All Three Characters ?
      brute 
public class SubstringCounter {
    public int numberOfSubstrings(String s) {
        int n = s.length();
        int count = 0;

        for (int i = 0; i < n; i++) {
            boolean hasA = false, hasB = false, hasC = false;

            for (int j = i; j < n; j++) {
                char ch = s.charAt(j);
                if (ch == 'a') hasA = true;
                else if (ch == 'b') hasB = true;
                else if (ch == 'c') hasC = true;

                if (hasA && hasB && hasC) {
                    count++;
                }
            }
        }

        return count;
    }

    public static void main(String[] args) {
        SubstringCounter obj = new SubstringCounter();
        String s = "abcabc";
        System.out.println(obj.numberOfSubstrings(s)); 
    }
}


1248. Count Number of Nice Subarrays

 brute
public class BruteNiceSubarrays {
    public int numberOfSubarrays(int[] nums, int k) {
        int n = nums.length;
        int count = 0;

        for (int i = 0; i < n; i++) {
            int oddCount = 0;

            for (int j = i; j < n; j++) {
                if (nums[j] % 2 != 0) {
                    oddCount++;
                }

                if (oddCount == k) {
                    count++;
                } else if (oddCount > k) {
                    break; // Optimization: no need to check further
                }
            }
        }

        return count;
    }

    public static void main(String[] args) {
        BruteNiceSubarrays obj = new BruteNiceSubarrays();
        int[] nums = {1, 1, 2, 1, 1};
        int k = 3;
        System.out.println(obj.numberOfSubarrays(nums, k)); 
    }
}


424. Longest Repeating Character Replacement

public class LongestRepeatingCharacterReplacementBrute {

    public int characterReplacement(String s, int k) {
        int n = s.length();
        int maxLength = 0;

        for (int i = 0; i < n; i++) {
            int[] freq = new int[26];
            int maxFreq = 0;

            for (int j = i; j < n; j++) {
                char currentChar = s.charAt(j);         // Get the current character
                int charIndex = currentChar - 'A';      // Convert 'A'-'Z' to 0-25
                freq[charIndex]++;                      // Increment count for this character

                maxFreq = Math.max(maxFreq, freq[charIndex]); // Update max frequency in window

                int windowLength = j - i + 1;
                int changesNeeded = windowLength - maxFreq;

                if (changesNeeded <= k) {
                    maxLength = Math.max(maxLength, windowLength);
                }
            }
        }

        return maxLength;
    }

    public static void main(String[] args) {
        LongestRepeatingCharacterReplacementBrute obj = new LongestRepeatingCharacterReplacementBrute();
        System.out.println(obj.characterReplacement("AABABBA", 1));  // Output: 4
    }
}




